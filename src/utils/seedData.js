const Admin = require('../models/Admin');
const Envelope = require('../models/Envelope');
const Donation = require('../models/Donation');
const RefreshToken = require('../models/RefreshToken');

/**
 * Cr√©er l'administrateur par d√©faut
 */
const createDefaultAdmin = async () => {
  try {
    // V√©rifier si un admin existe d√©j√†
    const existingAdmin = await Admin.findOne({ email: 'admin@wedding-donation.com' });
    
    if (!existingAdmin) {
      const defaultAdmin = new Admin({
        name: 'Administrateur Principal',
        email: 'admin@wedding-donation.com',
        password: 'Admin123!',
        phone: '+225 0701234567',
        role: 'super_admin',
        isActive: true,
        settings: {
          emailNotifications: true,
          smsNotifications: false,
          autoExport: true,
          twoFactorAuth: false
        }
      });

      await defaultAdmin.save();
      console.log('‚úÖ Admin par d√©faut cr√©√©:', defaultAdmin.email);
    } else {
      console.log('‚ÑπÔ∏è Admin par d√©faut existe d√©j√†');
    }
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation admin par d√©faut:', error.message);
  }
};

/**
 * Cr√©er des enveloppes de test
 */
const createTestEnvelopes = async () => {
  try {
    const envelopes = [
      {
        title: 'Don Standard',
        amount: 50,
        description: 'Votre participation nous fait tr√®s plaisir et contribue √† notre bonheur.',
        isActive: true,
        color: '#10b981',
        icon: 'Mail',
        sortOrder: 1
      },
      {
        title: 'Don Premium',
        amount: 100,
        description: 'Un don g√©n√©reux qui nous aide √† r√©aliser nos r√™ves de mariage.',
        isActive: true,
        color: '#3b82f6',
        icon: 'Heart',
        sortOrder: 2
      },
      {
        title: 'Don VIP',
        amount: 200,
        description: 'Votre soutien exceptionnel nous touche profond√©ment. Merci pour votre g√©n√©rosit√©.',
        isActive: true,
        color: '#8b5cf6',
        icon: 'Star',
        sortOrder: 3
      },
      {
        title: 'Don C√©l√©bration',
        amount: 150,
        description: 'Participez √† notre c√©l√©bration et cr√©ez des souvenirs inoubliables avec nous.',
        isActive: true,
        color: '#f59e0b',
        icon: 'Gift',
        sortOrder: 4
      },
      {
        title: 'Don Amiti√©',
        amount: 75,
        description: 'L\'amiti√© est le plus beau cadeau. Merci de partager ce moment avec nous.',
        isActive: true,
        color: '#ec4899',
        icon: 'Users',
        sortOrder: 5
      },
      {
        title: 'Don Famille',
        amount: 300,
        description: 'Le soutien de notre famille est notre plus grande force. Merci pour votre amour.',
        isActive: true,
        color: '#06b6d4',
        icon: 'Home',
        sortOrder: 6
      },
      {
        title: 'Don Modeste',
        amount: 25,
        description: 'Chaque don, m√™me modeste, compte pour nous. Merci pour votre soutien.',
        isActive: true,
        color: '#84cc16',
        icon: 'Smile',
        sortOrder: 7
      },
      {
        title: 'Don Luxe',
        amount: 500,
        description: 'Votre g√©n√©rosit√© exceptionnelle nous permet de r√©aliser nos r√™ves les plus fous.',
        isActive: false,
        color: '#f97316',
        icon: 'Crown',
        sortOrder: 8
      }
    ];

    let createdCount = 0;
    for (const envelopeData of envelopes) {
      const existingEnvelope = await Envelope.findOne({ title: envelopeData.title });
      if (!existingEnvelope) {
        const envelope = new Envelope(envelopeData);
        await envelope.save();
        console.log(`‚úÖ Enveloppe cr√©√©e: ${envelope.title}`);
        createdCount++;
      } else {
        console.log(`‚ÑπÔ∏è Enveloppe existe d√©j√†: ${envelopeData.title}`);
      }
    }

    console.log(`‚úÖ ${createdCount} nouvelles enveloppes cr√©√©es`);
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation enveloppes:', error.message);
  }
};

/**
 * Cr√©er des donations de test
 */
const createTestDonations = async () => {
  try {
    // R√©cup√©rer les enveloppes existantes
    const envelopes = await Envelope.find({ isActive: true }).limit(5);
    
    if (envelopes.length === 0) {
      console.log('‚ÑπÔ∏è Aucune enveloppe active trouv√©e pour cr√©er des donations');
      return;
    }

    // V√©rifier s'il y a d√©j√† des donations de test
    const existingDonations = await Donation.countDocuments({
      email: { $regex: /@example\.com$/ }
    });

    if (existingDonations > 0) {
      console.log(`‚ÑπÔ∏è ${existingDonations} donations de test existent d√©j√†`);
      return;
    }

    const donors = [
      'Marie Dupont',
      'Jean Martin',
      'Sophie Bernard',
      'Pierre Durand',
      'Anne Moreau',
      'Michel Petit',
      'Isabelle Roux',
      'Fran√ßois Simon',
      'Catherine Michel',
      'Philippe Leroy',
      'Nathalie David',
      'Laurent Bertrand',
      'Val√©rie Rousseau',
      'Thierry Henry',
      'Sandrine Girard'
    ];

    const messages = [
      'F√©licitations pour votre mariage !',
      'Que votre union soit remplie de bonheur.',
      'Meilleurs v≈ìux pour votre nouvelle vie.',
      'Profitez bien de ce moment sp√©cial.',
      'Que l\'amour vous guide toujours.',
      'Bonne chance pour votre avenir ensemble.',
      'Que votre mariage soit magnifique.',
      'Tous nos v≈ìux de bonheur.',
      'C√©l√©brez votre amour avec joie.',
      'Que cette journ√©e soit inoubliable.'
    ];

    const paymentMethods = ['Wave', 'OM', 'MTN Momo', 'Moov', 'Visa Mastercard'];
    const options = ['Option A', 'Option B', 'Option C'];
    const statuses = ['completed', 'pending', 'failed'];

    // Cr√©er 50 donations de test
    for (let i = 0; i < 50; i++) {
      const randomEnvelope = envelopes[Math.floor(Math.random() * envelopes.length)];
      const randomDonor = donors[Math.floor(Math.random() * donors.length)];
      const randomMessage = messages[Math.floor(Math.random() * messages.length)];
      const randomPaymentMethod = paymentMethods[Math.floor(Math.random() * paymentMethods.length)];
      const randomOption = options[Math.floor(Math.random() * options.length)];
      const randomStatus = statuses[Math.floor(Math.random() * statuses.length)];

      // Date al√©atoire dans les 30 derniers jours
      const randomDate = new Date();
      randomDate.setDate(randomDate.getDate() - Math.floor(Math.random() * 30));

      const donation = new Donation({
        reference: `DON-${String(i + 1).padStart(6, '0')}`, // Ajouter explicitement la r√©f√©rence
        amount: randomEnvelope.amount,
        donor: randomDonor,
        email: `${randomDonor.toLowerCase().replace(' ', '.')}@example.com`,
        date: randomDate,
        time: randomDate.toLocaleTimeString('fr-FR', { 
          hour: '2-digit', 
          minute: '2-digit' 
        }),
        status: randomStatus,
        anonymous: Math.random() < 0.1, // 10% de donations anonymes
        message: Math.random() < 0.7 ? randomMessage : '', // 70% avec message
        paymentMethod: randomPaymentMethod,
        option: randomOption,
        envelope: randomEnvelope._id,
        transactionId: `TXN-${String(i + 1).padStart(6, '0')}`,
        ipAddress: `192.168.1.${Math.floor(Math.random() * 255)}`,
        userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      });

      await donation.save();

      // Incr√©menter le compteur d'utilisation si la donation est compl√©t√©e
      if (randomStatus === 'completed') {
        await randomEnvelope.incrementUsage();
      }
    }

    console.log('‚úÖ 50 donations de test cr√©√©es');
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation donations:', error.message);
  }
};

/**
 * Nettoyer les donn√©es de test (optionnel)
 */
const cleanupTestData = async () => {
  try {
    // Supprimer les donations de test (avec email example.com)
    const deletedDonations = await Donation.deleteMany({
      email: { $regex: /@example\.com$/ }
    });

    // R√©initialiser les compteurs d'utilisation des enveloppes
    await Envelope.updateMany({}, { usageCount: 0 });

    console.log(`‚úÖ ${deletedDonations.deletedCount} donations de test supprim√©es`);
    console.log('‚úÖ Compteurs d\'utilisation r√©initialis√©s');
  } catch (error) {
    console.error('‚ùå Erreur nettoyage donn√©es:', error.message);
  }
};

/**
 * Fonction principale pour initialiser toutes les donn√©es de test
 */
const seedData = async () => {
  console.log('üå± D√©but de l\'initialisation des donn√©es de test...');
  
  await createTestEnvelopes();
  await createTestDonations();
  
  console.log('‚úÖ Initialisation des donn√©es de test termin√©e');
};

/**
 * Obtenir les statistiques des donn√©es
 */
const getDataStats = async () => {
  try {
    const adminCount = await Admin.countDocuments();
    const envelopeCount = await Envelope.countDocuments();
    const donationCount = await Donation.countDocuments();
    const activeEnvelopeCount = await Envelope.countDocuments({ isActive: true });
    const completedDonationCount = await Donation.countDocuments({ status: 'completed' });

    console.log('üìä Statistiques des donn√©es:');
    console.log(`   - Admins: ${adminCount}`);
    console.log(`   - Enveloppes: ${envelopeCount} (${activeEnvelopeCount} actives)`);
    console.log(`   - Donations: ${donationCount} (${completedDonationCount} compl√©t√©es)`);

    return {
      admins: adminCount,
      envelopes: envelopeCount,
      activeEnvelopes: activeEnvelopeCount,
      donations: donationCount,
      completedDonations: completedDonationCount
    };
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration statistiques:', error.message);
    return null;
  }
};

module.exports = {
  createDefaultAdmin,
  createTestEnvelopes,
  createTestDonations,
  cleanupTestData,
  seedData,
  getDataStats
};
