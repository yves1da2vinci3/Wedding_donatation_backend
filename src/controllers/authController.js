const jwt = require('jsonwebtoken');
const { validationResult } = require('express-validator');
const Admin = require('../models/Admin');
const RefreshToken = require('../models/RefreshToken');
const config = require('../config/config');
const { 
  createTokenPair, 
  renewTokens, 
  revokeRefreshToken, 
  revokeAllRefreshTokens,
  getActiveTokensInfo,
} = require('../utils/tokenUtils');

// @desc    Login administrateur
// @route   POST /api/auth/login
// @access  Public
const login = async (req, res) => {
  try {
    // V√©rifier les erreurs de validation
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        message: 'Donn√©es invalides',
        errors: errors.array()
      });
    }

    const { email, password } = req.body;

   console.log("üöÄ ~ login ~ req.body:", req.body)

    // V√©rifier si l'admin existe
    const admin = await Admin.findOne({ email }).select('+password');
    // console.log("üöÄ ~ login ~ admin:", admin)
    
    if (!admin) {
      return res.status(401).json({
        message: 'Email ou mot de passe incorrect'
      });
    }

    // V√©rifier si le compte est actif
    if (!admin.isActive) {
      return res.status(401).json({
        message: 'Compte administrateur d√©sactiv√©'
      });
    }

    // V√©rifier le mot de passe
    const isPasswordValid = await admin.comparePassword(password);
    if (!isPasswordValid) {
      return res.status(401).json({
        message: 'Email ou mot de passe incorrect'
      });
    }

    // Mettre √† jour la derni√®re connexion
    admin.lastLogin = new Date();
    await admin.save();

    // Cr√©er les tokens (access + refresh)
    const tokenOptions = {
      userAgent: req.get('User-Agent') || '',
      ipAddress: req.ip || req.connection.remoteAddress || ''
    };

    const tokens = await createTokenPair(admin, tokenOptions);

    // R√©ponse de succ√®s
    res.json({
      message: 'Connexion r√©ussie',
      token: tokens.accessToken,
      refreshToken: tokens.refreshToken,
      expiresIn: tokens.expiresIn,
      tokenType: tokens.tokenType,
      admin: {
        id: admin._id,
        name: admin.name,
        email: admin.email,
        role: admin.role,
        lastLogin: admin.lastLogin
      }
    });

  } catch (error) {
    console.error('Erreur de connexion:', error);
    res.status(500).json({
      message: 'Erreur interne du serveur',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erreur interne'
    });
  }
};

// @desc    Renouveler les tokens avec un refresh token
// @route   POST /api/auth/refresh
// @access  Public
const refreshTokens = async (req, res) => {
  try {
    const { refreshToken } = req.body;

    if (!refreshToken) {
      return res.status(400).json({
        message: 'Refresh token requis'
      });
    }

    // Options pour le nouveau token
    const tokenOptions = {
      userAgent: req.get('User-Agent') || '',
      ipAddress: req.ip || req.connection.remoteAddress || ''
    };

    // Renouveler les tokens
    const result = await renewTokens(refreshToken, tokenOptions);

    res.json({
      message: 'Tokens renouvel√©s avec succ√®s',
      token: result.accessToken,
      refreshToken: result.refreshToken,
      expiresIn: config.jwt.expiresIn || '15m',
      tokenType: 'Bearer',
      admin: result.admin
    });

  } catch (error) {
    console.error('Erreur renouvellement tokens:', error);
    res.status(401).json({
      message: '√âchec du renouvellement des tokens',
      error: error.message
    });
  }
};

// @desc    Obtenir le profil de l'admin connect√©
// @route   GET /api/auth/me
// @access  Private
const getMe = async (req, res) => {
  try {
    const admin = await Admin.findById(req.admin.id);
    
    if (!admin) {
      return res.status(404).json({
        message: 'Administrateur non trouv√©'
      });
    }

    res.json({
      admin: {
        id: admin._id,
        name: admin.name,
        email: admin.email,
        phone: admin.phone,
        role: admin.role,
        isActive: admin.isActive,
        lastLogin: admin.lastLogin,
        settings: admin.settings,
        createdAt: admin.createdAt,
        updatedAt: admin.updatedAt
      }
    });

  } catch (error) {
    console.error('Erreur r√©cup√©ration profil:', error);
    res.status(500).json({
      message: 'Erreur interne du serveur',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erreur interne'
    });
  }
};

// @desc    Logout administrateur
// @route   POST /api/auth/logout
// @access  Private
const logout = async (req, res) => {
  try {
    const refreshToken = req.body.refreshToken;
    
    // R√©voquer le refresh token sp√©cifique s'il est fourni
    if (refreshToken) {
      await revokeRefreshToken(refreshToken);
    }

    // R√©voquer tous les tokens de l'admin connect√© pour une d√©connexion compl√®te
    await revokeAllRefreshTokens(req.admin.id);

    res.json({
      message: 'D√©connexion r√©ussie'
    });

  } catch (error) {
    console.error('Erreur de d√©connexion:', error);
    res.status(500).json({
      message: 'Erreur interne du serveur',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erreur interne'
    });
  }
};

// @desc    Logout de tous les appareils
// @route   POST /api/auth/logout-all
// @access  Private
const logoutAll = async (req, res) => {
  try {
    // R√©voquer tous les refresh tokens de l'admin
    await revokeAllRefreshTokens(req.admin.id);

    res.json({
      message: 'D√©connexion de tous les appareils r√©ussie'
    });

  } catch (error) {
    console.error('Erreur d√©connexion globale:', error);
    res.status(500).json({
      message: 'Erreur interne du serveur',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erreur interne'
    });
  }
};

// @desc    Changer le mot de passe
// @route   PUT /api/auth/change-password
// @access  Private
const changePassword = async (req, res) => {
  try {
    // V√©rifier les erreurs de validation
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        message: 'Donn√©es invalides',
        errors: errors.array()
      });
    }

    const { currentPassword, newPassword, revokeAllTokens = true } = req.body;
    const admin = await Admin.findById(req.admin.id).select('+password');

    if (!admin) {
      return res.status(404).json({
        message: 'Administrateur non trouv√©'
      });
    }

    // V√©rifier le mot de passe actuel
    const isCurrentPasswordValid = await admin.comparePassword(currentPassword);
    if (!isCurrentPasswordValid) {
      return res.status(400).json({
        message: 'Mot de passe actuel incorrect'
      });
    }

    // Mettre √† jour le mot de passe
    admin.password = newPassword;
    await admin.save();

    // R√©voquer tous les refresh tokens pour forcer une nouvelle connexion
    if (revokeAllTokens) {
      await revokeAllRefreshTokens(admin._id);
    }

    res.json({
      message: 'Mot de passe modifi√© avec succ√®s',
      tokensRevoked: revokeAllTokens
    });

  } catch (error) {
    console.error('Erreur changement mot de passe:', error);
    res.status(500).json({
      message: 'Erreur interne du serveur',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erreur interne'
    });
  }
};

// @desc    Mettre √† jour le profil admin
// @route   PUT /api/auth/profile
// @access  Private
const updateProfile = async (req, res) => {
  try {
    // V√©rifier les erreurs de validation
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        message: 'Donn√©es invalides',
        errors: errors.array()
      });
    }

    const { name, phone, settings } = req.body;
    const admin = await Admin.findById(req.admin.id);

    if (!admin) {
      return res.status(404).json({
        message: 'Administrateur non trouv√©'
      });
    }

    // Mettre √† jour les champs
    if (name) admin.name = name;
    if (phone !== undefined) admin.phone = phone;
    if (settings) {
      admin.settings = { ...admin.settings, ...settings };
    }

    await admin.save();

    res.json({
      message: 'Profil mis √† jour avec succ√®s',
      admin: {
        id: admin._id,
        name: admin.name,
        email: admin.email,
        phone: admin.phone,
        role: admin.role,
        settings: admin.settings,
        updatedAt: admin.updatedAt
      }
    });

  } catch (error) {
    console.error('Erreur mise √† jour profil:', error);
    res.status(500).json({
      message: 'Erreur interne du serveur',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erreur interne'
    });
  }
};

// @desc    Obtenir les tokens actifs de l'admin
// @route   GET /api/auth/tokens
// @access  Private
const getActiveTokens = async (req, res) => {
  try {
    const tokens = await getActiveTokensInfo(req.admin.id);

    res.json({
      message: 'Tokens actifs r√©cup√©r√©s',
      tokens,
      count: tokens.length
    });

  } catch (error) {
    console.error('Erreur r√©cup√©ration tokens:', error);
    res.status(500).json({
      message: 'Erreur interne du serveur',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erreur interne'
    });
  }
};

// @desc    R√©voquer un token sp√©cifique
// @route   DELETE /api/auth/tokens/:tokenId
// @access  Private
const revokeToken = async (req, res) => {
  try {
    const { tokenId } = req.params;

    // Trouver et r√©voquer le token s'il appartient √† l'admin connect√©
    const token = await RefreshToken.findOne({
      _id: tokenId,
      admin: req.admin.id,
      isRevoked: false
    });

    if (!token) {
      return res.status(404).json({
        message: 'Token non trouv√© ou d√©j√† r√©voqu√©'
      });
    }

    await token.revoke();

    res.json({
      message: 'Token r√©voqu√© avec succ√®s'
    });

  } catch (error) {
    console.error('Erreur r√©vocation token:', error);
    res.status(500).json({
      message: 'Erreur interne du serveur',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erreur interne'
    });
  }
};

module.exports = {
  login,
  refreshTokens,
  getMe,
  logout,
  logoutAll,
  changePassword,
  updateProfile,
  getActiveTokens,
  revokeToken
};