const API_BASE_URL = 'http://localhost:3001/api';

async function makeRequest(url, options = {}) {
  const response = await fetch(url, {
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    },
    ...options
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    throw new Error(errorData.message || `HTTP ${response.status}`);
  }

  return response.json();
}

async function testLogout() {
  try {
    console.log('üß™ Test du logout...');

    // 1. Login
    console.log('\n1. Connexion...');
    const loginData = await makeRequest(`${API_BASE_URL}/auth/login`, {
      method: 'POST',
      body: JSON.stringify({
        email: 'admin@wedding-donation.com',
        password: 'Admin123!'
      })
    });

    const { token, refreshToken } = loginData;
    console.log('‚úÖ Connexion r√©ussie');

    // 2. V√©rifier que l'utilisateur est connect√©
    console.log('\n2. V√©rification de l\'authentification...');
    const meData = await makeRequest(`${API_BASE_URL}/auth/me`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    console.log('‚úÖ Utilisateur authentifi√©:', meData.admin.name);

    // 3. Test logout
    console.log('\n3. Test du logout...');
    const logoutData = await makeRequest(`${API_BASE_URL}/auth/logout`, {
      method: 'POST',
      body: JSON.stringify({ refreshToken }),
      headers: { Authorization: `Bearer ${token}` }
    });
    console.log('‚úÖ Logout r√©ussi:', logoutData.message);

    // 4. V√©rifier que l'utilisateur n'est plus connect√©
    console.log('\n4. V√©rification post-logout...');
    try {
      await makeRequest(`${API_BASE_URL}/auth/me`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      console.log('‚ùå Erreur: L\'utilisateur est encore connect√©');
    } catch (error) {
      if (error.message.includes('401')) {
        console.log('‚úÖ Utilisateur correctement d√©connect√©');
      } else {
        console.log('‚ùå Erreur inattendue:', error.message);
      }
    }

    // 5. Test logout sans refresh token
    console.log('\n5. Test logout sans refresh token...');
    const logoutData2 = await makeRequest(`${API_BASE_URL}/auth/logout`, {
      method: 'POST',
      body: JSON.stringify({}),
      headers: { Authorization: `Bearer ${token}` }
    });
    console.log('‚úÖ Logout sans refresh token r√©ussi:', logoutData2.message);

    console.log('\nüéâ Tous les tests de logout sont pass√©s!');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
  }
}

// Ex√©cuter le test
testLogout(); 