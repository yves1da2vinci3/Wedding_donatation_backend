#!/usr/bin/env node

/**
 * Script pour cr√©er l'administrateur par d√©faut
 * Usage: npm run create-admin
 */

const mongoose = require('mongoose');
const { createDefaultAdmin } = require('../src/utils/seedData');
const config = require('../src/config/config');

// Couleurs pour les logs
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

const log = {
  info: (msg) => console.log(`${colors.cyan}‚ÑπÔ∏è  ${msg}${colors.reset}`),
  success: (msg) => console.log(`${colors.green}‚úÖ ${msg}${colors.reset}`),
  error: (msg) => console.log(`${colors.red}‚ùå ${msg}${colors.reset}`),
  warning: (msg) => console.log(`${colors.yellow}‚ö†Ô∏è  ${msg}${colors.reset}`),
  title: (msg) => console.log(`${colors.bright}${colors.blue}üöÄ ${msg}${colors.reset}`)
};

async function main() {
  try {
    log.title('Cr√©ation de l\'administrateur par d√©faut');
    
    // V√©rifier la configuration
    if (!config.mongodb?.uri) {
      throw new Error('Configuration MongoDB manquante. V√©rifiez votre fichier .env et la variable MONGODB_URI');
    }
    
    log.info(`Connexion √† la base de donn√©es: ${config.mongodb.uri}`);

    // Connexion √† MongoDB
    await mongoose.connect(config.mongodb.uri);

    log.success('Connexion √† la base de donn√©es √©tablie');

    // Cr√©er l'admin par d√©faut
    await createDefaultAdmin();

    log.success('Script termin√© avec succ√®s');
    log.info('Informations de connexion par d√©faut:');
    console.log(`   üìß Email: ${colors.bright}admin@wedding-donation.com${colors.reset}`);
    console.log(`   üîê Mot de passe: ${colors.bright}Admin123!${colors.reset}`);
    console.log(`   üë§ R√¥le: ${colors.bright}super_admin${colors.reset}`);

  } catch (error) {
    log.error(`Erreur lors de l'ex√©cution du script: ${error.message}`);
    process.exit(1);
  } finally {
    // Fermer la connexion
    await mongoose.connection.close();
    log.info('Connexion ferm√©e');
    process.exit(0);
  }
}

// Gestion des signaux pour une fermeture propre
process.on('SIGINT', async () => {
  log.warning('Interruption d√©tect√©e, fermeture...');
  await mongoose.connection.close();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  log.warning('Terminaison d√©tect√©e, fermeture...');
  await mongoose.connection.close();
  process.exit(0);
});

// Ex√©cuter le script
main();
